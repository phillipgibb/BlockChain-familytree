var fs = require('fs');
var contract = require("truffle-contract");
import getTransactionReceiptMined from './getTransactionReceiptMined';

export default class FamilyTreeWrapper {

  constructor(web3) {
    this.contractInstance;
    this.web3 = web3;
    this.familyTreeABI = [{"constant":false,"inputs":[{"name":"otherSpouseId","type":"int128"},{"name":"firstName","type":"bytes18"},{"name":"lastName","type":"bytes18"},{"name":"gender","type":"bytes6"},{"name":"dateOfBirth","type":"int128"},{"name":"dateOfDeath","type":"int128"}],"name":"addSpouse","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[{"name":"id","type":"int128"}],"name":"getChildren","outputs":[{"name":"children","type":"string"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"parentId","type":"int128"},{"name":"firstName","type":"bytes18"},{"name":"lastName","type":"bytes18"},{"name":"gender","type":"bytes6"},{"name":"dateOfBirth","type":"int128"},{"name":"dateOfDeath","type":"int128"}],"name":"addChild","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"name":"id","type":"int128"},{"name":"dateOfDeath","type":"int128"}],"name":"funeral","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[],"name":"kill","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"name":"childId","type":"int128"},{"name":"firstName","type":"bytes18"},{"name":"lastName","type":"bytes18"},{"name":"gender","type":"bytes6"},{"name":"dateOfBirth","type":"int128"},{"name":"dateOfDeath","type":"int128"}],"name":"addFather","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[],"name":"getNumberOfFamilyMembers","outputs":[{"name":"","type":"int128"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[{"name":"id","type":"int128"}],"name":"getNode","outputs":[{"name":"firstName","type":"bytes18"},{"name":"lastName","type":"bytes18"},{"name":"gender","type":"bytes6"},{"name":"dateOfBirth","type":"int128"},{"name":"spouseId","type":"int128"},{"name":"dateOfDeath","type":"int128"},{"name":"noOfChildren","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"firstName","type":"bytes18"},{"name":"lastName","type":"bytes18"},{"name":"gender","type":"bytes6"},{"name":"dateOfBirth","type":"int128"},{"name":"dateOfDeath","type":"int128"}],"name":"addFamilyMember","outputs":[{"name":"id","type":"int128"}],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"name":"id","type":"int128"}],"name":"deleteFamilyMember","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"name":"childId","type":"int128"},{"name":"firstName","type":"bytes18"},{"name":"lastName","type":"bytes18"},{"name":"gender","type":"bytes6"},{"name":"dateOfBirth","type":"int128"},{"name":"dateOfDeath","type":"int128"}],"name":"addMother","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[{"name":"array","type":"int128[]"}],"name":"arrayToCsvString","outputs":[{"name":"arrayString","type":"string"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"spouseId","type":"int128"},{"name":"otherSpouseId","type":"int128"}],"name":"divorse","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[{"name":"id","type":"int128"}],"name":"getFullName","outputs":[{"name":"","type":"bytes18"},{"name":"","type":"bytes18"}],"payable":false,"stateMutability":"view","type":"function"},{"inputs":[{"name":"firstName","type":"bytes18"},{"name":"lastName","type":"bytes18"},{"name":"gender","type":"bytes6"},{"name":"dateOfBirth","type":"int128"}],"payable":true,"stateMutability":"payable","type":"constructor"},{"payable":true,"stateMutability":"payable","type":"fallback"},{"anonymous":false,"inputs":[{"indexed":false,"name":"fromAddress","type":"address"},{"indexed":false,"name":"firstName","type":"bytes18"},{"indexed":false,"name":"lastName","type":"bytes18"}],"name":"FamilyCreated","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"name":"fromAddress","type":"address"},{"indexed":false,"name":"firstName","type":"bytes18"},{"indexed":false,"name":"lastName","type":"bytes18"},{"indexed":false,"name":"gender","type":"bytes6"}],"name":"FamilyMemberAdded","type":"event"}];
    this.familyTreeByteCode = "";

  }

  initialize() {
    console.log("Initializing");
    this.familyTreeContract = this.web3.eth.contract(this.familyTreeABI);
  }

  estimateGas(params) {
    const estimateGasAsync = (resolve, reject) => {
      this.web3.eth.estimateGas(
        params,
        (error, estimatedGas) => {
          if (error) {
            reject(error)
          } else {
            resolve(estimatedGas)
          }
        }
      )
    }
    return new Promise(estimateGasAsync)
  }

  findContract(contractAddress) {
    var contract = this.web3.eth.contract(this.familyTreeABI);
    this.contractInstance = contract.at(contractAddress);
    return this.contractInstance;
  }

  async newFamilyTree(address, firstName, lastName, gender, dob) {
    console.log("DATE OF BIRTH: " + dob);
    console.log("firstName: " + firstName);
    console.log("lastName: " + lastName);
    console.log("gender: " + gender);
    this.deployedContract = await this.familyTreeContract.new(firstName, lastName, gender, dob, { from: address, gas: 3000000, data: this.familyTreeByteCode }, (contractError, contractResult) => {
      if (!contractError && contractResult) {
        if (!contractResult.contractAddress) {
          App.showMessage('Please wait for Contract to be Mined ...', 'info');
          getTransactionReceiptMined(contractResult.transactionHash, 500).then(function (receipt) {
            App.displayNewFamilyTree(receipt);
            return receipt;
          });
        } else {
          App.displayNewFamilyResult(contractResult);
           return contractResult;
        }
      } else if (contractError) {
        App.showMessage("Contract Creation Error: " + contractError, 'danger');
        return contractError;
      }
    });
    return this.deployedContract;
  }

  async getNumberOfFamilyMembers(callback) {
    return await this.contractInstance.getNumberOfFamilyMembers.call(callback);
  }

  async addFamilyMember(addFromId, ownerAddress, firstName, lastName, gender, familyMemberType, dob, dod) {

    var options = { from: ownerAddress, gas: 3000000, data: this.familyTreeByteCode };
    // var id = await this.contractInstance.addFamilyMember(firstName, lastName, gender, dob,dod, options, addFamilyMemberCallback);

    const addFamilyMemberCallback = (contractError, contractResult) => {
      if (!contractError && contractResult) {
        if (!contractResult) {
          App.showMessage('Please wait for Contract to be Mined ...', 'info');
          getTransactionReceiptMined(contractResult.transactionHash, 500).then(function (receipt, error) {
            if (!error) {
              var message = "Family Member Added with ";
              message += "Transaction Hash: " + receipt;
              App.showMessage(message, 'success');
              //need funtion to add to  App.familyTreeStructure
              App.makeTree();
              return receipt;
            } else {
              App.showMessage("Contract Creation Error: " + error, 'danger');
              return error;
            }
          });
        } else {
          var message = "Family Member Added with ";
          message += "Transaction Hash: " + contractResult;
          App.showMessage(message, 'success');
          App.makeTree();
          return contractResult;
        }
      } else if (contractError) {
        App.showMessage("Contract Creation Error: " + contractError, 'danger');
        return contractError;
      }
    }

    if (!familyMemberType) {
      await this.contractInstance.addFamilyMember(firstName, lastName, gender, dob, dod, options, addFamilyMemberCallback);
    } else if (familyMemberType === 'Spouse') {
      await this.contractInstance.addSpouse(addFromId, firstName, lastName, gender, dob, dod, options, addFamilyMemberCallback);
    } else if (familyMemberType === 'Child') {
      await this.contractInstance.addChild(addFromId, firstName, lastName, gender, dob, dod, options, addFamilyMemberCallback);
    } else if (familyMemberType === 'Parent') {
      if (gender === 'Male') {
        await this.contractInstance.addFather(addFromId, firstName, lastName, gender, dob, dod, options, addFamilyMemberCallback);
      } else {
        await this.contractInstance.addMother(addFromId, firstName, lastName, gender, dob, dod, options, addFamilyMemberCallback);
      }
    }

    return this.deployedContract;
  }

}

// We need to wait until any miner has included the transaction
  // in a block to get the address of the contract
  //this method seems to be out of scope otherwise I would use it
 /* waitForContractToBeMined(contract){
    console.log('waiting for contract to be mined');
    const receipt = web3.eth.getTransactionReceipt(contract.transactionHash);
    // If no receipt, try again in 1s
    if (receipt == null) {
        setTimeout(() => {
            waitForTransactionReceipt(contract);
        }, 1000);
    } else {
        // The transaction was mined, we can retrieve the contract address
        console.log('contract address: ' + receipt.contractAddress);
        return receipt.contractAddress;
    }
  }

  getTransactionReceiptMined(txHash, interval) {
    const self = web3.eth;
    const transactionReceiptAsync = function (resolve, reject) {
      self.getTransactionReceipt(txHash, (error, receipt) => {
        if (error) {
          reject(error);
        } else if (receipt == null) {
          setTimeout(
            () => transactionReceiptAsync(resolve, reject),
            interval ? interval : 500);
        } else {
          resolve(receipt);
        }
      });
    };

    if (Array.isArray(txHash)) {
      return Promise.all(txHash.map(
        oneTxHash => self.getTransactionReceiptMined(oneTxHash, interval)));
    } else if (typeof txHash === "string") {
      return new Promise(transactionReceiptAsync);
    } else {
      throw new Error("Invalid Type: " + txHash);
    }
  };
*/


  // hexEncode(string){
  //   var hex, i;
  //   var result = "";
  //   for (i=0; i<this.length; i++) {
  //       hex = this.charCodeAt(i).toString(16);
  //       result += ("000"+hex).slice(-4);
  //   }
  //   return result
  // }
